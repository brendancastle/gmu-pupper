# import UDPComms
from PS4Joystick import Joystick
import numpy as np
import time
from src.State import BehaviorState, State
from src.Command import Command
from src.Utilities import deadband, clipped_first_order_filter

PUPPER_COLOR = {"red":0, "blue":0, "green":255}
MESSAGE_RATE = 20

class JoystickInterface:
    def __init__(self, config, udp_port=8830, udp_publisher_port=8840):
        self.config = config
        self.previous_gait_toggle = 0
        self.previous_state = BehaviorState.REST
        self.previous_hop_toggle = 0
        self.previous_activate_toggle = 0

        self.joystick = Joystick()
        self.joystick.led_color(**PUPPER_COLOR)

    def get_command(self, state, do_print=False):
        values = self.joystick.get_input()

        left_y = -values["left_analog_y"]
        right_y = -values["right_analog_y"]
        right_x = values["right_analog_x"]
        left_x = values["left_analog_x"]

        L2 = values["l2_analog"]
        R2 = values["r2_analog"]

        R1 = values["button_r1"]
        L1 = values["button_l1"]

        square = values["button_square"]
        x = values["button_cross"]
        circle = values["button_circle"]
        triangle = values["button_triangle"]

        dpadx = values["dpad_right"] - values["dpad_left"]
        dpady = values["dpad_up"] - values["dpad_down"]

        msg = {
            "ly": left_y,
            "lx": left_x,
            "rx": right_x,
            "ry": right_y,
            "L2": L2,
            "R2": R2,
            "R1": R1,
            "L1": L1,
            "dpady": dpady,
            "dpadx": dpadx,
            "x": x,
            "square": square,
            "circle": circle,
            "triangle": triangle,
            "message_rate": MESSAGE_RATE,
        }

        command = Command(height=self.config.default_z_ref)

        ####### Handle discrete commands ########
        # Check if requesting a state transition to trotting, or from trotting to resting
        gait_toggle = msg["R1"]
        command.trot_event = gait_toggle == 1 and self.previous_gait_toggle == 0

        # Check if requesting a state transition to hopping, from trotting or resting
        # hop_toggle = msg["x"]
        hop_toggle = msg["circle"]
        command.hop_event = hop_toggle == 1 and self.previous_hop_toggle == 0

        activate_toggle = msg["L1"]
        command.activate_event = (
            activate_toggle == 1 and self.previous_activate_toggle == 0
        )

        # Update previous values for toggles and state
        self.previous_gait_toggle = gait_toggle
        self.previous_hop_toggle = hop_toggle
        self.previous_activate_toggle = activate_toggle

        ####### Handle continuous commands ########
        input_curve = lambda x: np.sign(x) * min(x ** 2, 1)
        # x_vel = msg["ly"] * self.config.max_x_velocity
        # y_vel = msg["lx"] * -self.config.max_y_velocity
        x_vel = input_curve(msg["ly"]) * self.config.max_x_velocity
        y_vel = input_curve(msg["lx"]) * -self.config.max_y_velocity
        command.horizontal_velocity = np.array([x_vel, y_vel])
        command.yaw_rate = msg["rx"] * -self.config.max_yaw_rate

        message_rate = msg["message_rate"]
        message_dt = 1.0 / message_rate

        pitch = msg["ry"] * self.config.max_pitch
        deadbanded_pitch = deadband(pitch, self.config.pitch_deadband)
        pitch_rate = clipped_first_order_filter(
            state.pitch,
            deadbanded_pitch,
            self.config.max_pitch_rate,
            self.config.pitch_time_constant,
        )
        command.pitch = state.pitch + message_dt * pitch_rate

        height_movement = msg["dpady"]
        command.height = (
            state.height - message_dt * self.config.z_speed * height_movement
        )

        roll_movement = -msg["dpadx"]
        command.roll = (
            state.roll + message_dt * self.config.roll_speed * roll_movement
        )

        return command

    def set_color(self, color):
        self.joystick.led_color(color["red"], color["green"], color["blue"])
